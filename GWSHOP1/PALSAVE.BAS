'****************  PALSAVE.Bas - Save PCX with Palette information

'   (C) Copyright 1991, Crescent Software
'   Written by Nash Bly

'****************************************************
'   WARNING: DON'T RUN THIS IN THE ENVIRONMENT!!!
'****************************************************

'   SavePCX demonstrates using Gaphics Workshop routines to save EGA\VGA
'   screens to PCX files including palette information.  Saving screens
'   with palette data for the following screen modes is possible:

'   SCREEN 9  -  EGA 640x350  16 Color
'   SCREEN 12 -  VGA 640x480  16 Color

'   NOTE - If the pcx file was not generated for the screen mode chosen to
'          display it, don't be too suprised if the colors aren't right.

'   Palette information may be available to the program writing the disk
'   file because the screen being saved was generated by the program, if not,
'   it must be obtained by reading the palette data from memory as would be
'   the case for a screen capture TSR.  For VGA screens, Graphics Workshop
'   routines which take advantage of BIOS services can be used to read the
'   palette information.  There are no such BIOS services for reading EGA
'   palettes and so this is a bit more complicated.  A 1990 Programmer's
'   Journal article by Chris Howard of Genus Microprogramming offered the
'   method used here to accomplish this task.

'   Compile and Link as follows:

'   BC SAVEPCX  /O;
'   BC PCXHEADR /O;
'   BC DISPLPCX /O;
'   BC SETVIDEO /O;

'   LINK /E SAVEPCX PCXHEADR DISPLPCX SETVIDEO, , NUL, GW


DEFINT A-Z

'--------  Graphics Workshop declarations

'$INCLUDE: 'GWDecl.BAS'

'--------  Dimension Static Variables

DIM RGB(2)                                      'small array for RGB values
DIM RAMTable(1 TO 14)                           '28 byte table of 7 pointers
DIM RAMArea(1 TO 128)                           '256 byte area of EGA data
DIM PAL AS STRING * 48                          'buffer for PCX palette info

'--------  Graphics Workshop screen and data intialization

'$INCLUDE: 'GetVideo.Bas'

'***************************************************************************
'******************************  EGA SCREEN 9  *****************************
'***************************************************************************

EGA:

'--------  Setup an area in RAM for where BIOS will keep EGA palette data

	DEF SEG = 0                                 'low mem address &H4A8
	Pointer = &H4A8                             'locates a ROM pointer table
	ROMAdd& = PEEK(Pointer) + 256& * PEEK(Pointer + 1)
	ROMSeg& = PEEK(Pointer + 2) + 256& * PEEK(Pointer + 3)

	DEF SEG = ROMSeg&                           'copy ROM pointer table data
	FOR I = 1 TO 14                             'to our RAM pointer table
	    Pointer& = PEEK(ROMAdd& + J) + 256& * PEEK(ROMAdd& + J + 1)
	    IF Pointer& > 32767 THEN Pointer& = Pointer& - 65536
	    RAMTable(I) = Pointer&
	    J = J + 2
	NEXT

	RAMTable(3) = VARPTR(RAMArea(1))            'set pointer in our RAM table
	RAMTable(4) = VARSEG(RAMArea(1))            'to the RAM area for EGA data

	DEF SEG = 0                                 'change low mem pointer to
	TableAdd& = VARPTR(RAMTable(1))             'our new RAM pointer table
	TableSeg& = VARSEG(RAMTable(1))
	POKE Pointer, TableAdd& MOD 256
	POKE Pointer + 1, TableAdd& \ 256
	POKE Pointer + 2, TableSeg& MOD 256
	POKE Pointer + 3, TableSeg& \ 256

'--------  Load a sample EGA screen

	GPDat%(31) = 5                              'select EGA screen mode
	CALL SetVideo                               'set screen mode to screen 9

	Filename$ = "Mountain.PCX"                  'GW sample PCX file
	CALL DisplayPCXFile(Filename$, 0)           'display the screen

'--------  Read EGA Palette data, convert and copy to PCX palette buffer

	K = 1
	DEF SEG = RAMTable(4)                       'set segment to EGA data area
	FOR I = 0 TO 15                             'for each of the 16 palettes
		PalReg = PEEK(RAMTable(3) + I)                      'read palette byte
		RGB(0) = (PalReg AND 4) \ 2 + (PalReg AND 32) \ 32  'parse red value
		RGB(1) = (PalReg AND 2) + (PalReg AND 16) \ 16      'parse green value
		RGB(2) = (PalReg AND 1) * 2 + (PalReg AND 8) \ 8    'parse blue value
		FOR J = 0 TO 2                          'store a byte for R,G, and B
			MID$(PAL, K) = CHR$(RGB(J) * 64)    'whose value ranges 0 to 255
			K = K + 1                           'using a scaling factor of 64
		NEXT
	NEXT

'--------  Save the EGA screen to a PCX file

	CALL SavePCXVE("DEMOSAVE.PCX")              'this part is extremely easy

'--------  Save the EGA palette info in the PCX file

	OPEN "DemoSave.PCX" FOR BINARY AS #1        'open the PCX file
	SEEK #1, 17                                 'bytes 17 thru 64 hold palette
	PUT #1, , PAL                               'drop in our palette data
	CLOSE #1                                    'and close the file

'--------  Redisplay the PCX file to prove things went well

	COLOR 7, 0
	PRINT "Press a key to view saved screen"    'display a message
	WHILE LEN(INKEY$) = 0: WEND                 'pause for a key press

	CLS                                         'clear the screen
	CALL DisplayPCXFile("DEMOSAVE.PCX", 0)      'display the saved file

	COLOR 7, 0
	PRINT "Press a key to view a VGA Screen"    'display a message
	WHILE LEN(INKEY$) = 0: WEND                 'pause for a key press

'--------  Restore the EGA ROM pointer table

	DEF SEG = 0                                 'change low mem pointer to
	POKE Pointer, ROMAdd& MOD 256               'original ROM pointer table
	POKE Pointer + 1, ROMAdd& \ 256             'this must be done before
	POKE Pointer + 2, ROMSeg& MOD 256           'the program ends and the
	POKE Pointer + 3, ROMSeg& \ 256             'RAM tables disappear!

'***************************************************************************
'*****************************  VGA SCREEN 12  *****************************
'***************************************************************************

VGA:

'--------  Load a sample VGA screen

	GPDat%(31) = 8                              'select VGA screen mode
	CALL SetVideo                               'set screen mode to screen 12

	Filename$ = "VGA.PCX"                       'GW sample PCX file
	CALL DisplayPCXFile(Filename$, 0)           'display the screen

'--------  Read VGA Palette data, convert and copy into PCX buffer

	K = 1
	FOR I = 0 TO 15                             'for each of the 16 palettes
	  GetPalTripleVGA I, RGB(0), RGB(1), RGB(2) 'read the VGA palette triplet
	  FOR J = 0 TO 2                            'store a byte for R, G, and B
	  MID$(PAL, K) = CHR$(RGB(J) * 4)           'whose value ranges 0 to 255
		  K = K + 1                             'using a scaling factor of 4
	  NEXT
	NEXT

'--------  Save the VGA screen to a PCX file

	CALL SavePCXVE("DEMOSAVE.PCX")              'again this is very easy

'--------  Save the VGA palette info in the PCX file

	OPEN "DemoSave.PCX" FOR BINARY AS #1        'open the PCX file
	SEEK #1, 17                                 'bytes 17 thru 64 hold palette
	PUT #1, , PAL                               'drop in our palette data
	CLOSE #1                                    'and close the file

'--------  Redisplay the PCX file to prove things went well

	COLOR 8
	PRINT "Press a key to view saved screen"    'display a message
	WHILE LEN(INKEY$) = 0: WEND                 'pause for a key press

	CLS                                         'clear the screen
	CALL DisplayPCXFile("DEMOSAVE.PCX", 0)      'display the saved file

	COLOR 8
	PRINT "Press any key to continue"           'display a message
	WHILE LEN(INKEY$) = 0: WEND                 'pause for a key press

'--------  Reset and clear the screen

	SCREEN 0
	END


